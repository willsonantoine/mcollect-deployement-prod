try{self["workbox:core:7.2.0"]&&_()}catch{}const O=(n,...e)=>{let t=n;return e.length>0&&(t+=` :: ${JSON.stringify(e)}`),t},I=O;class h extends Error{constructor(e,t){const s=I(e,t);super(s),this.name=e,this.details=t}}const f={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},C=n=>[f.prefix,n,f.suffix].filter(e=>e&&e.length>0).join("-"),M=n=>{for(const e of Object.keys(f))n(e)},U={updateDetails:n=>{M(e=>{typeof n[e]=="string"&&(f[e]=n[e])})},getGoogleAnalyticsName:n=>n||C(f.googleAnalytics),getPrecacheName:n=>n||C(f.precache),getPrefix:()=>f.prefix,getRuntimeName:n=>n||C(f.runtime),getSuffix:()=>f.suffix};function K(n,e){const t=e();return n.waitUntil(t),t}try{self["workbox:precaching:7.2.0"]&&_()}catch{}const W="__WB_REVISION__";function v(n){if(!n)throw new h("add-to-cache-list-unexpected-type",{entry:n});if(typeof n=="string"){const a=new URL(n,location.href);return{cacheKey:a.href,url:a.href}}const{revision:e,url:t}=n;if(!t)throw new h("add-to-cache-list-unexpected-type",{entry:n});if(!e){const a=new URL(t,location.href);return{cacheKey:a.href,url:a.href}}const s=new URL(t,location.href),r=new URL(t,location.href);return s.searchParams.set(W,e),{cacheKey:s.href,url:r.href}}class S{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const r=t.originalRequest.url;s?this.notUpdatedURLs.push(r):this.updatedURLs.push(r)}return s}}}class q{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:s})=>{const r=(s==null?void 0:s.cacheKey)||this._precacheController.getCacheKeyForURL(t.url);return r?new Request(r,{headers:t.headers}):t},this._precacheController=e}}let g;function A(){if(g===void 0){const n=new Response("");if("body"in n)try{new Response(n.body),g=!0}catch{g=!1}g=!1}return g}async function D(n,e){let t=null;if(n.url&&(t=new URL(n.url).origin),t!==self.location.origin)throw new h("cross-origin-copy-response",{origin:t});const s=n.clone(),a={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},c=A()?s.body:await s.blob();return new Response(c,a)}const j=n=>new URL(String(n),location.href).href.replace(new RegExp(`^${location.origin}`),"");function T(n,e){const t=new URL(n);for(const s of e)t.searchParams.delete(s);return t.href}async function F(n,e,t,s){const r=T(e.url,t);if(e.url===r)return n.match(e,s);const a=Object.assign(Object.assign({},s),{ignoreSearch:!0}),c=await n.keys(e,a);for(const i of c){const o=T(i.url,t);if(r===o)return n.match(i,s)}}class H{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const B=new Set;async function $(){for(const n of B)await n()}function x(n){return new Promise(e=>setTimeout(e,n))}try{self["workbox:strategies:7.2.0"]&&_()}catch{}function m(n){return typeof n=="string"?new Request(n):n}class V{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new H,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const s of this._plugins)this._pluginStateMap.set(s,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let s=m(e);if(s.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const c=await t.preloadResponse;if(c)return c}const r=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const c of this.iterateCallbacks("requestWillFetch"))s=await c({request:s.clone(),event:t})}catch(c){if(c instanceof Error)throw new h("plugin-error-request-will-fetch",{thrownErrorMessage:c.message})}const a=s.clone();try{let c;c=await fetch(s,s.mode==="navigate"?void 0:this._strategy.fetchOptions);for(const i of this.iterateCallbacks("fetchDidSucceed"))c=await i({event:t,request:a,response:c});return c}catch(c){throw r&&await this.runCallbacks("fetchDidFail",{error:c,event:t,originalRequest:r.clone(),request:a.clone()}),c}}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}async cacheMatch(e){const t=m(e);let s;const{cacheName:r,matchOptions:a}=this._strategy,c=await this.getCacheKey(t,"read"),i=Object.assign(Object.assign({},a),{cacheName:r});s=await caches.match(c,i);for(const o of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await o({cacheName:r,matchOptions:a,cachedResponse:s,request:c,event:this.event})||void 0;return s}async cachePut(e,t){const s=m(e);await x(0);const r=await this.getCacheKey(s,"write");if(!t)throw new h("cache-put-with-no-response",{url:j(r.url)});const a=await this._ensureResponseSafeToCache(t);if(!a)return!1;const{cacheName:c,matchOptions:i}=this._strategy,o=await self.caches.open(c),l=this.hasCallback("cacheDidUpdate"),p=l?await F(o,r.clone(),["__WB_REVISION__"],i):null;try{await o.put(r,l?a.clone():a)}catch(u){if(u instanceof Error)throw u.name==="QuotaExceededError"&&await $(),u}for(const u of this.iterateCallbacks("cacheDidUpdate"))await u({cacheName:c,oldResponse:p,newResponse:a.clone(),request:r,event:this.event});return!0}async getCacheKey(e,t){const s=`${e.url} | ${t}`;if(!this._cacheKeys[s]){let r=e;for(const a of this.iterateCallbacks("cacheKeyWillBeUsed"))r=m(await a({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[s]=r}return this._cacheKeys[s]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const s=this._pluginStateMap.get(t);yield a=>{const c=Object.assign(Object.assign({},a),{state:s});return t[e](c)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const r of this.iterateCallbacks("cacheWillUpdate"))if(t=await r({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||t&&t.status!==200&&(t=void 0),t}}class k{constructor(e={}){this.cacheName=U.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s=typeof e.request=="string"?new Request(e.request):e.request,r="params"in e?e.params:void 0,a=new V(this,{event:t,request:s,params:r}),c=this._getResponse(a,s,t),i=this._awaitComplete(c,a,s,t);return[c,i]}async _getResponse(e,t,s){await e.runCallbacks("handlerWillStart",{event:s,request:t});let r;try{if(r=await this._handle(t,e),!r||r.type==="error")throw new h("no-response",{url:t.url})}catch(a){if(a instanceof Error){for(const c of e.iterateCallbacks("handlerDidError"))if(r=await c({error:a,event:s,request:t}),r)break}if(!r)throw a}for(const a of e.iterateCallbacks("handlerWillRespond"))r=await a({event:s,request:t,response:r});return r}async _awaitComplete(e,t,s,r){let a,c;try{a=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:r,request:s,response:a}),await t.doneWaiting()}catch(i){i instanceof Error&&(c=i)}if(await t.runCallbacks("handlerDidComplete",{event:r,request:s,response:a,error:c}),t.destroy(),c)throw c}}class d extends k{constructor(e={}){e.cacheName=U.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(d.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let s;const r=t.params||{};if(this._fallbackToNetwork){const a=r.integrity,c=e.integrity,i=!c||c===a;s=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?c||a:void 0})),a&&i&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,s.clone()))}else throw new h("missing-precache-entry",{cacheName:this.cacheName,url:e.url});return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const s=await t.fetch(e);if(!await t.cachePut(e,s.clone()))throw new h("bad-precaching-response",{url:e.url,status:s.status});return s}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[s,r]of this.plugins.entries())r!==d.copyRedirectedCacheableResponsesPlugin&&(r===d.defaultPrecacheCacheabilityPlugin&&(e=s),r.cacheWillUpdate&&t++);t===0?this.plugins.push(d.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}d.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:n}){return!n||n.status>=400?null:n}};d.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:n}){return n.redirected?await D(n):n}};class G{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new d({cacheName:U.getPrecacheName(e),plugins:[...t,new q({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){const t=[];for(const s of e){typeof s=="string"?t.push(s):s&&s.revision===void 0&&t.push(s.url);const{cacheKey:r,url:a}=v(s),c=typeof s!="string"&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==r)throw new h("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:r});if(typeof s!="string"&&s.integrity){if(this._cacheKeysToIntegrities.has(r)&&this._cacheKeysToIntegrities.get(r)!==s.integrity)throw new h("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(r,s.integrity)}if(this._urlsToCacheKeys.set(a,r),this._urlsToCacheModes.set(a,c),t.length>0){const i=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(i)}}}install(e){return K(e,async()=>{const t=new S;this.strategy.plugins.push(t);for(const[a,c]of this._urlsToCacheKeys){const i=this._cacheKeysToIntegrities.get(c),o=this._urlsToCacheModes.get(a),l=new Request(a,{integrity:i,cache:o,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:c},request:l,event:e}))}const{updatedURLs:s,notUpdatedURLs:r}=t;return{updatedURLs:s,notUpdatedURLs:r}})}activate(e){return K(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),s=await t.keys(),r=new Set(this._urlsToCacheKeys.values()),a=[];for(const c of s)r.has(c.url)||(await t.delete(c),a.push(c.url));return{deletedURLs:a}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s)return(await self.caches.open(this.strategy.cacheName)).match(s)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new h("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params=Object.assign({cacheKey:t},s.params),this.strategy.handle(s))}}let b;const E=()=>(b||(b=new G),b);try{self["workbox:routing:7.2.0"]&&_()}catch{}const N="GET",R=n=>n&&typeof n=="object"?n:{handle:n};class w{constructor(e,t,s=N){this.handler=R(t),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=R(e)}}class Q extends w{constructor(e,t,s){const r=({url:a})=>{const c=e.exec(a.href);if(c&&!(a.origin!==location.origin&&c.index!==0))return c.slice(1)};super(r,t,s)}}class z{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data,s=Promise.all(t.urlsToCache.map(r=>{typeof r=="string"&&(r=[r]);const a=new Request(...r);return this.handleRequest({request:a,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return;const r=s.origin===location.origin,{params:a,route:c}=this.findMatchingRoute({event:t,request:e,sameOrigin:r,url:s});let i=c&&c.handler;const o=e.method;if(!i&&this._defaultHandlerMap.has(o)&&(i=this._defaultHandlerMap.get(o)),!i)return;let l;try{l=i.handle({url:s,request:e,event:t,params:a})}catch(u){l=Promise.reject(u)}const p=c&&c.catchHandler;return l instanceof Promise&&(this._catchHandler||p)&&(l=l.catch(async u=>{if(p)try{return await p.handle({url:s,request:e,event:t,params:a})}catch(P){P instanceof Error&&(u=P)}if(this._catchHandler)return this._catchHandler.handle({url:s,request:e,event:t});throw u})),l}findMatchingRoute({url:e,sameOrigin:t,request:s,event:r}){const a=this._routes.get(s.method)||[];for(const c of a){let i;const o=c.match({url:e,sameOrigin:t,request:s,event:r});if(o)return i=o,(Array.isArray(i)&&i.length===0||o.constructor===Object&&Object.keys(o).length===0||typeof o=="boolean")&&(i=void 0),{route:c,params:i}}return{}}setDefaultHandler(e,t=N){this._defaultHandlerMap.set(t,R(e))}setCatchHandler(e){this._catchHandler=R(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new h("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new h("unregister-route-route-not-registered")}}let y;const J=()=>(y||(y=new z,y.addFetchListener(),y.addCacheListener()),y);function L(n,e,t){let s;if(typeof n=="string"){const a=new URL(n,location.href),c=({url:i})=>i.href===a.href;s=new w(c,e,t)}else if(n instanceof RegExp)s=new Q(n,e,t);else if(typeof n=="function")s=new w(n,e,t);else if(n instanceof w)s=n;else throw new h("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return J().registerRoute(s),s}function X(n,e=[]){for(const t of[...n.searchParams.keys()])e.some(s=>s.test(t))&&n.searchParams.delete(t);return n}function*Y(n,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:s=!0,urlManipulation:r}={}){const a=new URL(n,location.href);a.hash="",yield a.href;const c=X(a,e);if(yield c.href,t&&c.pathname.endsWith("/")){const i=new URL(c.href);i.pathname+=t,yield i.href}if(s){const i=new URL(c.href);i.pathname+=".html",yield i.href}if(r){const i=r({url:a});for(const o of i)yield o.href}}class Z extends w{constructor(e,t){const s=({request:r})=>{const a=e.getURLsToCacheKeys();for(const c of Y(r.url,t)){const i=a.get(c);if(i){const o=e.getIntegrityForCacheKey(i);return{cacheKey:i,integrity:o}}}};super(s,e.strategy)}}function ee(n){const e=E(),t=new Z(e,n);L(t)}function te(n){E().precache(n)}function se(n,e){te(n),ee(e)}class ne extends k{async _handle(e,t){let s=await t.cacheMatch(e),r;if(!s)try{s=await t.fetchAndCachePut(e)}catch(a){a instanceof Error&&(r=a)}if(!s)throw new h("no-response",{url:e.url,error:r});return s}}class re extends k{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,t){let s,r;try{const a=[t.fetch(e)];if(this._networkTimeoutSeconds){const c=x(this._networkTimeoutSeconds*1e3);a.push(c)}if(r=await Promise.race(a),!r)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(a){a instanceof Error&&(s=a)}if(!r)throw new h("no-response",{url:e.url,error:s});return r}}se([{"revision":null,"url":"assets/css/app.min.css"},{"revision":null,"url":"assets/css/bootstrap.min.css"},{"revision":null,"url":"assets/css/custom.min.css"},{"revision":null,"url":"assets/css/font.css"},{"revision":null,"url":"assets/css/icons.min.css"},{"revision":null,"url":"assets/icons/android/play_store_512.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-hdpi/ic_launcher_background.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-hdpi/ic_launcher_foreground.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-hdpi/ic_launcher_monochrome.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-hdpi/ic_launcher.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-mdpi/ic_launcher_background.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-mdpi/ic_launcher_foreground.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-mdpi/ic_launcher_monochrome.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-mdpi/ic_launcher.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xhdpi/ic_launcher_background.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xhdpi/ic_launcher_foreground.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xhdpi/ic_launcher_monochrome.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xhdpi/ic_launcher.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxhdpi/ic_launcher_background.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxhdpi/ic_launcher_foreground.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxhdpi/ic_launcher_monochrome.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxhdpi/ic_launcher.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxxhdpi/ic_launcher_background.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxxhdpi/ic_launcher_foreground.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxxhdpi/ic_launcher_monochrome.png"},{"revision":null,"url":"assets/icons/android/res/mipmap-xxxhdpi/ic_launcher.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-20@2x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-20@2x~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-20@3x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-20~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-29.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-29@2x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-29@2x~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-29@3x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-29~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-40@2x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-40@2x~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-40@3x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-40~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-60@2x~car.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-60@3x~car.png"},{"revision":null,"url":"assets/icons/ios/AppIcon-83.5@2x~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon@2x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon@2x~ipad.png"},{"revision":null,"url":"assets/icons/ios/AppIcon@3x.png"},{"revision":null,"url":"assets/icons/ios/AppIcon~ios-marketing.png"},{"revision":null,"url":"assets/icons/ios/AppIcon~ipad.png"},{"revision":null,"url":"assets/icons/web/apple-touch-icon.png"},{"revision":null,"url":"assets/icons/web/favicon.ico"},{"revision":null,"url":"assets/icons/web/icon-192-maskable.png"},{"revision":null,"url":"assets/icons/web/icon-192.png"},{"revision":null,"url":"assets/icons/web/icon-512-maskable.png"},{"revision":null,"url":"assets/icons/web/icon-512.png"},{"revision":null,"url":"assets/images/brands/bitbucket.png"},{"revision":null,"url":"assets/images/brands/dribbble.png"},{"revision":null,"url":"assets/images/brands/dropbox.png"},{"revision":null,"url":"assets/images/brands/github.png"},{"revision":null,"url":"assets/images/brands/mail_chimp.png"},{"revision":null,"url":"assets/images/brands/slack.png"},{"revision":null,"url":"assets/images/dashboard.png"},{"revision":null,"url":"assets/images/favicon.ico"},{"revision":null,"url":"assets/images/flags/ae.svg"},{"revision":null,"url":"assets/images/flags/china.svg"},{"revision":null,"url":"assets/images/flags/french.svg"},{"revision":null,"url":"assets/images/flags/germany.svg"},{"revision":null,"url":"assets/images/flags/italy.svg"},{"revision":null,"url":"assets/images/flags/russia.svg"},{"revision":null,"url":"assets/images/flags/spain.svg"},{"revision":null,"url":"assets/images/flags/us.svg"},{"revision":null,"url":"assets/images/logo-dark.png"},{"revision":null,"url":"assets/images/logo-light.png"},{"revision":null,"url":"assets/images/logo-sm.png"},{"revision":null,"url":"assets/images/logo.png"},{"revision":null,"url":"assets/images/products/img-1.png"},{"revision":null,"url":"assets/images/products/img-2.png"},{"revision":null,"url":"assets/images/products/img-3.png"},{"revision":null,"url":"assets/images/products/img-5.png"},{"revision":null,"url":"assets/images/products/img-6.png"},{"revision":null,"url":"assets/images/user-default.png"},{"revision":null,"url":"assets/images/verification-img.png"},{"revision":null,"url":"assets/index-DqUa2kwB.js"},{"revision":null,"url":"assets/index-fyQ5b64E.css"},{"revision":null,"url":"assets/js/app.js"},{"revision":null,"url":"assets/js/layout.js"},{"revision":null,"url":"assets/js/pages/apps-nft-auction.init.js"},{"revision":null,"url":"assets/js/pages/apps-nft-explore.init.js"},{"revision":null,"url":"assets/js/pages/apps-nft-ranking.init.js"},{"revision":null,"url":"assets/js/pages/crypto-kyc.init.js"},{"revision":null,"url":"assets/js/pages/crypto-orders.init.js"},{"revision":null,"url":"assets/js/pages/crypto-wallet.init.js"},{"revision":null,"url":"assets/js/pages/dashboard-ecommerce.init.js"},{"revision":null,"url":"assets/js/pages/invoicecreate.init.js"},{"revision":null,"url":"assets/js/pages/invoicedetails.js"},{"revision":null,"url":"assets/js/pages/invoiceslist.init.js"},{"revision":null,"url":"assets/js/pages/plugins/lord-icon-2.1.0.js"},{"revision":null,"url":"assets/js/pages/ticketlist.init.js"},{"revision":null,"url":"assets/js/plugins.js"},{"revision":null,"url":"assets/libs/apexcharts/apexcharts.min.js"},{"revision":null,"url":"assets/libs/bootstrap/js/bootstrap.bundle.min.js"},{"revision":null,"url":"assets/libs/choices.js/public/assets/scripts/choices.min.js"},{"revision":null,"url":"assets/libs/feather-icons/feather.min.js"},{"revision":null,"url":"assets/libs/flatpickr/flatpickr.min.js"},{"revision":null,"url":"assets/libs/jsvectormap/jsvectormap.min.css"},{"revision":null,"url":"assets/libs/jsvectormap/jsvectormap.min.js"},{"revision":null,"url":"assets/libs/jsvectormap/maps/world-merc.js"},{"revision":null,"url":"assets/libs/node-waves/waves.min.js"},{"revision":null,"url":"assets/libs/simplebar/simplebar.min.js"},{"revision":null,"url":"assets/libs/swiper/swiper-bundle.min.css"},{"revision":null,"url":"assets/libs/swiper/swiper-bundle.min.js"},{"revision":"c10b01737e65c8c65c2906a16e315587","url":"index.html"},{"revision":"0e6e6d6eb9a1bb97c14e6a2350073903","url":"offline.html"},{"revision":"1872c500de691dce40960bb85481de07","url":"registerSW.js"},{"revision":"d41d8cd98f00b204e9800998ecf8427e","url":"script.js"},{"revision":"7c7fa24132507302a1e600fc60e8d7b1","url":"manifest.webmanifest"}]);function ae(n){return n.startsWith("chrome-extension://")}L(({url:n})=>!ae(n.href),new re);self.addEventListener("fetch",n=>{n.request.mode==="navigate"?n.respondWith(fetch(n.request).catch(()=>caches.match("/offline.html"))):n.respondWith(fetch(n.request).catch(()=>caches.match(n.request).then(e=>e||new Response("Ressource non disponible hors ligne",{status:404,statusText:"Ressource non disponible hors ligne"}))))});L(({url:n})=>n.pathname==="/offline.html",new ne);
