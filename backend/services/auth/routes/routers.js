"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const users_controller_1 = __importDefault(require("../controllers/users.controller"));
const members_controller_1 = __importDefault(require("../controllers/members.controller"));
const vars_1 = require("../../../shared/utils/vars");
const auth_validator_1 = __importDefault(require("../validator/auth.validator"));
const authToken_1 = require("../../../shared/middleware/authToken");
const AuthRouter = express_1.default.Router();
AuthRouter.post("/login", (0, vars_1.Validate)(auth_validator_1.default.login), users_controller_1.default.login);
AuthRouter.get("/logOut", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin, authToken_1.EnumRoles.User]), users_controller_1.default.logOut);
AuthRouter.get("/members/find", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.findAll);
AuthRouter.post("/members/create", (0, vars_1.Validate)(auth_validator_1.default.createMembers), (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.create);
AuthRouter.put("/members/:id", (0, vars_1.Validate)(auth_validator_1.default.createMembers), (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.update);
AuthRouter.get("/members/type", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.findMemberType);
AuthRouter.get("/members/fonction", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.findMemberFonction);
AuthRouter.get("/members/civil-status", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.findMemberCilvilStatus);
AuthRouter.get("/members/genders", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.findMemberGenders);
AuthRouter.delete("/members/:id", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.deleteMember);
AuthRouter.get("/members-get-all-genders", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.getAllGenders);
AuthRouter.get("/members-get-statistics", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.getMemberStatistics);
AuthRouter.get("/members-next-number", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), members_controller_1.default.getNextNumberMember);
AuthRouter.put("/update-user-infos/:id", (0, vars_1.Validate)(auth_validator_1.default.updateUserInfos), (0, authToken_1.AuthToken)([authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.updateUserData);
AuthRouter.post("/create-user", (0, vars_1.Validate)(auth_validator_1.default.updateUserInfos), (0, authToken_1.AuthToken)([authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.createData);
AuthRouter.get("/users", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.getUsers);
AuthRouter.put("/update-login-infos", (0, vars_1.Validate)(auth_validator_1.default.changeLoginInfos), (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin, authToken_1.EnumRoles.User]), users_controller_1.default.changeLoginInfos);
AuthRouter.get("/users-access/:userId", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.getAccess);
AuthRouter.get("/get-all-roles", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.getAllRoles);
AuthRouter.put("/add-access/:userId/:id", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.Admin, authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.addAccessToUser);
AuthRouter.put("/init-password/:userId", (0, authToken_1.AuthToken)([authToken_1.EnumRoles.SuperAdmin]), users_controller_1.default.initPassword);
exports.default = AuthRouter;
